//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\SimpleLangLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Strumenta.Sharplasu.Tests.Models {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SimpleLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, DISPLAY=3, SET=4, INPUT=5, IS=6, PLUS=7, MINUS=8, MULT=9, 
		DIV=10, EQUAL=11, INT=12, DEC=13, STRING=14, BOOLEAN=15, INT_LIT=16, DEC_LIT=17, 
		STRING_LIT=18, BOOLEAN_LIT=19, ID=20;
	public const int
		WS_CHANNEL=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "WS_CHANNEL"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "NEWLINE", "DISPLAY", "SET", "INPUT", "IS", "PLUS", "MINUS", "MULT", 
		"DIV", "EQUAL", "INT", "DEC", "STRING", "BOOLEAN", "INT_LIT", "DEC_LIT", 
		"STRING_LIT", "BOOLEAN_LIT", "ID"
	};


	public SimpleLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'display'", "'set'", "'input'", "'is'", "'+'", "'-'", 
		"'*'", "'/'", "'='", "'int'", "'dec'", "'string'", "'boolean'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "DISPLAY", "SET", "INPUT", "IS", "PLUS", "MINUS", 
		"MULT", "DIV", "EQUAL", "INT", "DEC", "STRING", "BOOLEAN", "INT_LIT", 
		"DEC_LIT", "STRING_LIT", "BOOLEAN_LIT", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleLangLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,4,0,43,8,0,
		11,0,12,0,44,1,0,1,0,1,1,1,1,1,1,3,1,52,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,
		1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,
		12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,15,4,15,111,8,15,11,15,12,15,112,1,16,4,16,116,8,16,11,
		16,12,16,117,1,16,1,16,4,16,122,8,16,11,16,12,16,123,1,17,1,17,1,17,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,138,8,18,1,19,1,19,5,19,
		142,8,19,10,19,12,19,145,9,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,1,0,5,2,0,9,9,32,32,2,0,10,10,13,13,1,0,48,57,2,0,65,90,97,122,4,0,
		48,57,65,90,95,95,97,122,152,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,1,42,1,0,0,0,3,51,1,0,0,0,5,55,1,0,0,0,7,63,1,0,0,0,9,67,1,0,0,0,11,
		73,1,0,0,0,13,76,1,0,0,0,15,78,1,0,0,0,17,80,1,0,0,0,19,82,1,0,0,0,21,
		84,1,0,0,0,23,86,1,0,0,0,25,90,1,0,0,0,27,94,1,0,0,0,29,101,1,0,0,0,31,
		110,1,0,0,0,33,115,1,0,0,0,35,125,1,0,0,0,37,137,1,0,0,0,39,139,1,0,0,
		0,41,43,7,0,0,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,
		0,45,46,1,0,0,0,46,47,6,0,0,0,47,2,1,0,0,0,48,49,5,13,0,0,49,52,5,10,0,
		0,50,52,7,1,0,0,51,48,1,0,0,0,51,50,1,0,0,0,52,53,1,0,0,0,53,54,6,1,0,
		0,54,4,1,0,0,0,55,56,5,100,0,0,56,57,5,105,0,0,57,58,5,115,0,0,58,59,5,
		112,0,0,59,60,5,108,0,0,60,61,5,97,0,0,61,62,5,121,0,0,62,6,1,0,0,0,63,
		64,5,115,0,0,64,65,5,101,0,0,65,66,5,116,0,0,66,8,1,0,0,0,67,68,5,105,
		0,0,68,69,5,110,0,0,69,70,5,112,0,0,70,71,5,117,0,0,71,72,5,116,0,0,72,
		10,1,0,0,0,73,74,5,105,0,0,74,75,5,115,0,0,75,12,1,0,0,0,76,77,5,43,0,
		0,77,14,1,0,0,0,78,79,5,45,0,0,79,16,1,0,0,0,80,81,5,42,0,0,81,18,1,0,
		0,0,82,83,5,47,0,0,83,20,1,0,0,0,84,85,5,61,0,0,85,22,1,0,0,0,86,87,5,
		105,0,0,87,88,5,110,0,0,88,89,5,116,0,0,89,24,1,0,0,0,90,91,5,100,0,0,
		91,92,5,101,0,0,92,93,5,99,0,0,93,26,1,0,0,0,94,95,5,115,0,0,95,96,5,116,
		0,0,96,97,5,114,0,0,97,98,5,105,0,0,98,99,5,110,0,0,99,100,5,103,0,0,100,
		28,1,0,0,0,101,102,5,98,0,0,102,103,5,111,0,0,103,104,5,111,0,0,104,105,
		5,108,0,0,105,106,5,101,0,0,106,107,5,97,0,0,107,108,5,110,0,0,108,30,
		1,0,0,0,109,111,7,2,0,0,110,109,1,0,0,0,111,112,1,0,0,0,112,110,1,0,0,
		0,112,113,1,0,0,0,113,32,1,0,0,0,114,116,7,2,0,0,115,114,1,0,0,0,116,117,
		1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,121,5,46,0,
		0,120,122,7,2,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,
		124,1,0,0,0,124,34,1,0,0,0,125,126,5,34,0,0,126,127,5,34,0,0,127,36,1,
		0,0,0,128,129,5,102,0,0,129,130,5,97,0,0,130,131,5,108,0,0,131,132,5,115,
		0,0,132,138,5,101,0,0,133,134,5,116,0,0,134,135,5,114,0,0,135,136,5,117,
		0,0,136,138,5,101,0,0,137,128,1,0,0,0,137,133,1,0,0,0,138,38,1,0,0,0,139,
		143,7,3,0,0,140,142,7,4,0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,
		0,0,0,143,144,1,0,0,0,144,40,1,0,0,0,145,143,1,0,0,0,8,0,44,51,112,117,
		123,137,143,1,0,2,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Strumenta.SharpLasu.Tests.Models
